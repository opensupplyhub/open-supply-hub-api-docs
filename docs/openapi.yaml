openapi: 3.1.0
info:
  title: OS Hub API Design - V1
  summary: This is Target API Design for OS Hub, at this point in time it is a proposal and not a final design.
  description: This specification outlines proposed API design for OS Hub to facilitate discussions and gather feedback before development begins.
  version: 1.0.0
servers:
  - url: http://localhost:8095/api
    description: Local development server
tags:
  - name: countries
    description: Operations related to countries
  - name: sectors
    description: Operations related to sectors
  - name: product-types
    description: Operations related to product types
  - name: location-types
    description: Operations related to location types
  - name: parent-companies
    description: Operations related to parent companies
  - name: contributors
    description: Operations related to contributors
  - name: production-locations
    description: Operations related to production locations
  - name: moderation-events
    description: Operations related to moderation events
paths:
  /v1/contributors:
    get:
      parameters:
        - $ref: "#/components/parameters/limit"
        - name: search_after
          in: query
          description: Cursor for the pagination, needs to be value from the field used in `sort_by` param.
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: Filter using the email of the contributor.
          required: false
          schema:
            type: string
            format: email
            minLength: 1
            maxLength: 255
        - name: has_contributed
          in: query
          description: Filter using the boolean value of whether the contributor has contributed.
          required: false
          schema:
            type: boolean
        - name: account_type
          in: query
          description: Filter using the account type of the contributor.
          required: false
          schema:
            type: string
            enum: [individual, organization]
        - name: individual_role
          in: query
          description: Filter using the individual role of the contributor.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: organization.organization_type
          in: query
          description: Filter using the organization type of the contributor.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: organization.website_url
          in: query
          description: Filter using the website URL of the organization.
          required: false
          schema:
            type: string
            format: uri
            minLength: 1
            maxLength: 255
        - name: organization.name
          in: query
          description: Filter using the name of the organization.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: organization.description
          in: query
          description: Filter using the description of the organization.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: organization.country
          in: query
          description: Filter organization country using the alpha-2, alpha-3 or numeric code.
          required: false
          schema:
            type: string
            minLength: 1
        - name: sort_by
          in: query
          description: The field to sort the results by.
          required: false
          default: name
          schema:
            type: string
            enum: [email]
        - $ref: "#/components/parameters/order_by"
        - name: fields
          in: query
          description: The fields to include in the response.
          style: explode
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                [
                  email,
                  has_contributed,
                  account_type,
                  individual_role,
                  organization,
                ]
      summary: Get list of contributors to the OS Hub platform.
      description: >
        Returns an array of contributors with name and id, where id is the unique identifier of the contributor.
      tags:
        - contributors
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/contributor"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The request query is invalid."
                errors:
                  - field: "email"
                    message: "The value must be a valid email."
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
    post:
      summary: Create a new contributor.
      description: >
        Creates a new contributor with the given details.
      tags:
        - contributors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contributor"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contributor"
        422:
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The request body is invalid."
                errors:
                  - field: "email"
                    message: "The value must be a valid email."
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
  /v1/contributors/{user_id}:
    parameters:
      - name: user_id
        in: path
        description: The unique identifier of the contributor.
        required: true
        schema:
          type: string
    get:
      summary: Get details of a contributor by its unique identifier.
      description: >
        Returns details of a contributor with name and id and other properties, where id is the unique identifier of the contributor.
      tags:
        - contributors
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contributor"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The contributor with the given id was not found."
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
    put:
      summary: Update an existing contributor.
      description: >
        Updates an existing contributor with the given details.
      tags:
        - contributors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contributor"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contributor"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The contributor with the given id was not found."
        422:
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The request body is invalid."
                errors:
                  - field: "email"
                    message: "The value must be a valid email."
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
    patch:
      summary: Partially update an existing contributor.
      description: >
        Partially updates an existing contributor with the given details.
      tags:
        - contributors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contributor"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contributor"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The contributor with the given id was not found."
        422:
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The request body is invalid."
                errors:
                  - field: "email"
                    message: "The value must be a valid email."
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
    delete:
      summary: Delete an existing contributor.
      description: >
        Deletes an existing contributor with the given id.
      tags:
        - contributors
      responses:
        204:
          description: No Content
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The contributor with the given id was not found."
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
  /v1/countries:
    get:
      summary: Get list of countries supported by the OS Hub platform.
      description: >
        Returns an array of countries with name and id, where id is the ISO 3166-1 alpha-2 code of the country.
      tags:
        - countries
      parameters:
        - $ref: "#/components/parameters/limit"
        - name: search_after
          in: query
          description: Cursor for the pagination, needs to be value from the field used in `sort_by` param.
          required: false
          schema:
            type: string
            minLength: 2
            maxLength: 2
        - name: name
          in: query
          description: Filter using the name of the country.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: alpha_2
          in: query
          description: Filter using the ISO 3166-1 alpha-2 code of the country.
          required: false
          schema:
            type: string
            minLength: 2
            maxLength: 2
        - name: alpha_3
          in: query
          description: Filter using the ISO 3166-1 alpha-3 code of the country.
          required: false
          schema:
            type: string
            minLength: 3
            maxLength: 3
        - name: numeric
          in: query
          description: Filter using the ISO 3166-1 numeric code of the country.
          required: false
          schema:
            type: string
            minLength: 3
            maxLength: 3
        - name: sort_by
          in: query
          description: The field to sort the results by.
          required: false
          default: alpha_2
          schema:
            type: string
            enum: [name, alpha_2, alpha_3, numeric]
        - $ref: "#/components/parameters/order_by"
        - name: fields
          in: query
          description: The fields to include in the response.
          style: explode
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [name, alpha_2, alpha_3, numeric]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/country"
                example:
                  - name: "United Kingdom of Great Britain and Northern Ireland"
                    alpha_2: "GB"
                    alpha_3: "GBR"
                    numeric: "826"
                  - name: "United States of America"
                    alpha_2: "US"
                    alpha_3: "USA"
                    numeric: "840"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The request query is invalid."
                errors:
                  - field: "search_after"
                    message: "The value must be a valid id."
  /v1/sectors:
    get:
      parameters:
        - $ref: "#/components/parameters/limit"
        - name: search_after
          in: query
          description: Cursor for the pagination, needs to be value from the field used in `sort_by` param.
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: Filter using the name of the sector.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: sort_by
          in: query
          description: The field to sort the results by.
          required: false
          default: name
          schema:
            type: string
            enum: [name]
        - $ref: "#/components/parameters/order_by"
      summary: Get list of sectors that are present in the OS Hub platform.
      description: >
        Returns an array of sectors with that is aggregated from the production locations dataset.
      tags:
        - sectors
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/sector"
                example:
                  - name: "Agriculture"
                  - name: "Apparel"
                  - name: "Information"
  /v1/product-types:
    get:
      parameters:
        - $ref: "#/components/parameters/limit"
        - name: search_after
          in: query
          description: Cursor for the pagination, needs to be value from the field used in `sort_by` param.
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: Filter using the name of the product type.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: sort_by
          in: query
          description: The field to sort the results by.
          required: false
          default: name
          schema:
            type: string
            enum: [name]
        - $ref: "#/components/parameters/order_by"
      summary: Get list of product types that are present in the OS Hub platform.
      description: >
        Returns an array of product types that are aggregated from the production locations dataset.
      tags:
        - product-types
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/product_type"
                example:
                  - name: "Accessories"
                  - name: "Belts"
                  - name: "Caps"
  /v1/location-types:
    get:
      parameters:
        - $ref: "#/components/parameters/limit"
        - name: search_after
          in: query
          description: Cursor for the pagination, needs to be value from the field used in `sort_by` param.
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: Filter using the name of the location type.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: processing_types.name
          in: query
          description: Filter using the processing type of the location type.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: sort_by
          in: query
          description: The field to sort the results by.
          required: false
          default: name
          schema:
            type: string
            enum: [name]
        - $ref: "#/components/parameters/order_by"
        - name: fields
          in: query
          description: The fields to include in the response.
          style: explode
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [name, processing_types]
      summary: Get list of location types and related processing types that are supported by the OS Hub platform.
      description: >
        Returns an array of location types and related processing types that are supported by the platform.
      tags:
        - location-types
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/location_type"
                example:
                  - name: "Final Product Assembly"
                    processing_types:
                      - name: "Cutting"
                      - name: "Sewing"
                      - name: "Finishing"
                  - name: "Office / HQ"
                    processing_types:
                      - name: "Administration"
                      - name: "Management"
                      - name: "Sales"
                  - name: "Printing, Product Dyeing and Laundering"
                    processing_types:
                      - name: "Printing"
                      - name: "Dyeing"
                      - name: "Laundering"
  /v1/parent-companies:
    get:
      parameters:
        - $ref: "#/components/parameters/limit"
        - name: search_after
          in: query
          description: Cursor for the pagination, needs to be value from the field used in `sort_by` param.
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: Filter using the name of the parent company.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: sort_by
          in: query
          description: The field to sort the results by.
          required: false
          default: name
          schema:
            type: string
            enum: [name]
        - $ref: "#/components/parameters/order_by"
      summary: Get list of parent companies that are present in the OS Hub platform.
      description: >
        Returns an array of parent companies that are aggregated from the production locations dataset.
      tags:
        - parent-companies
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/parent_company"
                example:
                  - name: "Adidas AG"
                  - name: "Nike Inc."
                  - name: "Puma SE"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The request query is invalid."
                errors:
                  - field: "name"
                    message: "The value must be a non-empty string."
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
  /v1/production-locations:
    get:
      summary: Get list of production locations exposed by the OS Hub platform.
      parameters:
        - $ref: "#/components/parameters/limit"
        - name: search_after
          in: query
          description: Cursor for the pagination, needs to be value from the field used in `sort_by` param.
          required: false
          schema:
            type: string
        - name: query
          in: query
          description: Filter using the query string (searches across multiple fields).
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: os_id
          in: query
          description: Filter using the unique identifier of the location.
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: Filter using the name of the location.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: local_name
          in: query
          description: Filter using the local name of the location.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: description
          in: query
          description: Filter using the description of the location.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: address
          in: query
          description: Filter using the address of the location.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: sector
          in: query
          description: Filter using the sector of the location.
          required: false
          schema:
            type: array
            items:
              type: string
              minLength: 1
              maxLength: 255
        - name: product_type
          in: query
          description: Filter using the product type of the location.
          required: false
          schema:
            type: array
            items:
              type: string
              minLength: 1
              maxLength: 255
        - name: location_type
          in: query
          description: Filter using the location type of the location.
          required: false
          schema:
            type: array
            items:
              type: string
              minLength: 1
              maxLength: 255
        - name: processing_type
          in: query
          description: Filter using the processing type of the location.
          required: false
          schema:
            type: array
            items:
              type: string
              minLength: 1
              maxLength: 255
        - name: number_of_workers
          in: query
          description: Filter using the number of employees of the location.
          required: false
          schema:
            type: object
            properties:
              min:
                type: integer
                minimum: 0
              max:
                type: integer
                minimum: 0
          style: deepObject
          explode: true
        - name: coordinates
          in: query
          description: Filter using the coordinates of the location.
          required: false
          schema:
            type: object
            properties:
              lat:
                type: number
                minimum: -90
                maximum: 90
              lng:
                type: number
                minimum: -180
                maximum: 180
          style: deepObject
          explode: true
        - name: minimum_order_quantity
          in: query
          description: Filter using the minimum order quantity of the location.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 200
        - name: average_lead_time
          in: query
          description: Filter using the average lead time of the location.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 200
        - name: percent_female_workers
          in: query
          description: Filter using the percentage
          required: false
          schema:
            type: object
            properties:
              min:
                type: integer
                minimum: 0
                maximum: 100
              max:
                type: integer
                minimum: 0
                maximum: 100
          style: deepObject
          explode: true
        - name: affiliations
          in: query
          description: Filter using the affiliations of the location.
          required: false
          schema:
            type: array
            items:
              type: string
              minLength: 1
              maxLength: 255
        - name: certifications_standards_regulations
          in: query
          description: Filter using the certifications, standards, and regulations of the location.
          required: false
          schema:
            type: array
            items:
              type: string
              minLength: 1
              maxLength: 255
        - name: country
          in: query
          description: Filter using the alpha-2 code of the location.
          required: false
          schema:
            type: array
            items:
              type: string
              minLength: 2
        - name: sort_by
          in: query
          description: The field to sort the results by.
          required: false
          default: name
          schema:
            type: string
            enum: [name, address]
        - $ref: "#/components/parameters/order_by"
      description: >
        Returns an array of production locations with name and id and other properties, where id is the unique identifier of the location.
        Production location data for the search becomes available 15 minutes after upload to the system.
      tags:
        - production-locations
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/location"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The request query is invalid."
                errors:
                  - field: "number_of_workers"
                    message: "The value must be a valid object with `min` and `max` properties."
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
    post:
      summary: Create a new location.
      description: >
        Creates a new location with the given details.
      tags:
        - production-locations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/location_source"
      responses:
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/location_new"
        422:
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The request body is invalid."
                errors:
                  - field: "name"
                    message: "The value must be a non-empty string."
                  - field: "country"
                    message: "The value must be a valid country code or name."
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
  /v1/production-locations/{os_id}:
    parameters:
      - name: os_id
        in: path
        description: The unique identifier of the location.
        required: true
        schema:
          type: string
    get:
      summary: Get details of a location by its unique identifier.
      description: >
        Returns details of a location with name and id and other properties, where id is the unique identifier of the location.
      tags:
        - production-locations
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/location"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The request query is invalid."
                errors:
                  - field: "os_id"
                    message: "The value must be a valid id."
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The location with the given id was not found."
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
    patch:
      summary: Partially update an existing location.
      description: >
        Partially updates an existing location with the given details.
      tags:
        - production-locations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/location_source"
      responses:
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/location_update"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The location with the given id was not found."
        422:
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The request body is invalid."
                errors:
                  - field: "name"
                    message: "The value must be a non-empty string."
                  - field: "country"
                    message: "The value must be a valid country code or name."
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
    delete:
      summary: Delete an existing location.
      description: >
        Deletes an existing location with the given id.
      tags:
        - production-locations
      responses:
        204:
          description: No Content
          content:
            application/json:
              schema:
                example: null
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The location with the given id was not found."
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
  /v1/production-locations/{os_id}/contributions:
    parameters:
      - name: os_id
        in: path
        description: The unique identifier of the location.
        required: true
        schema:
          type: string
    get:
      summary: Get list of contributions history to a location.
      description: >
        Returns an array of contributions to a location with name and id and other properties, where id is the unique identifier of the contribution.
      tags:
        - production-locations
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/location_contribution"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The location with the given id was not found."
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
  /v1/production-locations/{os_id}/claims:
    parameters:
      - name: os_id
        in: path
        description: The unique identifier of the location.
        required: true
        schema:
          type: string
    get:
      summary: Get list of location claims.
      description: >
        Returns an array of claims to a location with name and id and other properties, where id is the unique identifier of the claim.
      tags:
        - production-locations
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/claim"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The location with the given id was not found."
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
    post:
      summary: Claim a location.
      description: >
        Claims a location with the given id.
      tags:
        - production-locations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/claim_base"
      responses:
        202:
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "pending"
                    enum: ["pending", "approved", "rejected"]
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The location with the given id was not found."
        422:
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The request body is invalid."
                errors:
                  - field: "job_title"
                    message: "The job title is required."
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
  /v1/moderation-events:
    get:
      summary: Get list of moderation events exposed by the OS Hub platform.
      parameters:
        - $ref: "#/components/parameters/limit"
        - name: search_after
          in: query
          description: Cursor for the pagination.
          required: false
          schema:
            type: string
        - name: contributor
          in: query
          description: Filter using contributor id.
          required: false
          schema:
            type: array
            items:
              type: number
        - name: os_id
          in: query
          description: Filter using the unique identifiers of the location.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: record_type
          in: query
          description: Filter using record type of production location.
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [CLAIM, SINGLE, API_POST]
        - name: match_status
          in: query
          description: Filter using match status of production location.
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [MATCH, NEW_LOCATION, POTENTIAL_MATCH]
        - name: moderation_status
          in: query
          description: Filter using moderation status of production location.
          required: false
          schema:
            type: string
            default: PENDING
            enum: [PENDING, APPROVED, REJECTED, REVOKED]
        - name: moderation_id
          in: query
          description: Filter using the unique moderation identifier.
          required: false
          schema:
            type: array
            items:
              type: number
        - name: country
          in: query
          description: Filter using the alpha-2 code of the location.
          required: false
          schema:
            type: array
            items:
              type: string
              minLength: 2
              maxLength: 2
        - name: date_gte
          in: query
          description: Set starting date to filter by production location creation timestamp.
          required: false
          schema:
            type: string
            format: date-time
        - name: date_lt
          in: query
          description: Set end date to filter by production location creation timestamp.
          required: false
          schema:
            type: string
            format: date-time
        - name: sort_by
          in: query
          description: The field to sort the results by.
          required: false
          default: created_at
          schema:
            type: string
            enum: [
              created_at,
              moderation_decision_date,
              updated_at,
              name,
              country,
              contributor,
              match_status,
              moderation_status,
            ]
        - $ref: "#/components/parameters/order_by"
      description: >
        Returns an array of moderation events.
        Moderation events data for the search becomes available 15 minutes after upload to the system.
      tags:
        - moderation-events
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/moderation_event"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              examples:
                invalid_moderation_id:
                  summary: Invalid `moderation_id`
                  value:
                    message: "The request query is invalid."
                    errors:
                      - field: "moderation_id"
                        message: "Moderation id must be a number"
                invalid_moderation_status:
                  summary: Invalid `moderation_status`
                  value:
                    message: "The request query is invalid."
                    errors:
                      - field: "moderation_status"
                        message: "Moderation status must be one of PENDING, APPROVED, REJECTED, or REVOKED."
                invalid_match_status:
                  summary: Invalid `match_status`
                  value:
                    message: "The request query is invalid."
                    errors:
                      - field: "match_status"
                        message: "Match status must be one of MATCH, NEW_LOCATION, or POTENTIAL_MATCH."
                invalid_record_type:
                  summary: Invalid `record_type`
                  value:
                    message: "The request query is invalid."
                    errors:
                      - field: "record_type"
                        message: "Record type must be one of CLAIM, SINGLE, or API_POST."
                invalid_country:
                  summary: Invalid `country`
                  value:
                    message: "The request query is invalid."
                    errors:
                      - field: "country"
                        message: "Country must be a valid alpha-2 country code."
                invalid_date_gte:
                  summary: Invalid `date_gte`
                  value:
                    message: "The request query is invalid."
                    errors:
                      - field: "date_gte"
                        message: "The value must be a valid date string."
                invalid_date_lt:
                  summary: Invalid `date_lt`
                  value:
                    message: "The request query is invalid."
                    errors:
                      - field: "date_lt"
                        message: "The value must be a valid date string."
                invalid_date_range:
                  summary: Invalid `date_lt` and `date_gte`
                  value:
                    message: "The request query is invalid."
                    errors:
                      - field: "date_lt"
                        message: "Start date cannot be later than the end date."
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
  /v1/moderation-events/{moderation_id}:
    get:
      summary: Get moderation event by id.
      parameters:
        - name: moderation_id
          in: path
          description: The unique identifier of moderation event.
          required: true
          schema:
            type: number
      description: >
        Returns moderation event associated with specific id.
        Moderation events data for the search becomes available 15 minutes after upload to the system.
      tags:
        - moderation-events
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/moderation_event"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "The request path parameter is invalid."
                errors:
                  - field: "moderation_id"
                    message: "Moderation id must be a number"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
    patch:
      summary: Change moderation event. Available only for data moderators.
      parameters:
        - name: moderation_id
          in: path
          description: The unique identifier of the moderation event.
          required: true
          schema:
            type: number
        - name: moderation_status
          in: query
          description: Moderation status of production location.
          required: false
          schema:
            type: string
            enum: [PENDING, APPROVED, REJECTED, REVOKED]
      description: >
        Returns updated moderation event.
        Moderation events data for the search becomes available 15 minutes after upload to the system.
      tags:
        - moderation-events
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/moderation_event"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              examples:
                invalid_moderation_id:
                  summary: Invalid `moderation_id`
                  value:
                    message: "The request path parameter is invalid."
                    errors:
                      - field: "moderation_id"
                        message: "Moderation id must be a number"
                invalid_moderation_status:
                  summary: Invalid `moderation_status`
                  value:
                    message: "The request query is invalid."
                    errors:
                      - field: "moderation_status"
                        message: "Moderation status must be one of PENDING, APPROVED, REJECTED, or REVOKED."
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                message: "An unexpected error occurred while processing the request."
components:
  schemas:
    claim:
      $ref: "schemas/claim.json"
    claim_base:
      $ref: "schemas/claim_base.json"
    parent_company:
      $ref: "schemas/parent_company.json"
    contributor:
      $ref: "schemas/contributor.json"
    country:
      $ref: "schemas/country.json"
    sector:
      $ref: "schemas/sector.json"
    product_type:
      $ref: "schemas/product_type.json"
    location_type:
      $ref: "schemas/location_type.json"
    processing_type:
      $ref: "schemas/processing_type.json"
    location_base:
      $ref: "schemas/location_base.json"
    location_contribution:
      $ref: "schemas/location_contribution.json"
    location:
      $ref: "schemas/location.json"
    location_source:
      $ref: "schemas/location_source.json"
    location_new:
      $ref: "schemas/location_new.json"
    location_update:
      $ref: "schemas/location_update.json"
    moderation_event:
      $ref: "schemas/moderation_event.json"
    match:
      $ref: "schemas/match.json"
    error:
      $ref: "schemas/error.json"

  parameters:
    order_by:
      name: order_by
      in: query
      description: The order to sort the results by.
      required: false
      schema:
        type: string
        default: asc
        enum: [asc, desc]

    limit:
      name: size
      in: query
      description: The maximum number of entries to return.
      required: false
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 251
